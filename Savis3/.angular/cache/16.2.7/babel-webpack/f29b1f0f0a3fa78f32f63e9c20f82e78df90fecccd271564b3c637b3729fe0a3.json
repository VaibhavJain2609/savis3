{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class OneMeanComponent {\n  constructor() {}\n  ngOnInit() {}\n  static #_ = this.ɵfac = function OneMeanComponent_Factory(t) {\n    return new (t || OneMeanComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OneMeanComponent,\n    selectors: [[\"app-one-mean\"]],\n    decls: 119,\n    vars: 12,\n    consts: [[\"id\", \"one-mean\"], [\"id\", \"page-title\"], [1, \"subtitle\"], [\"type\", \"checkbox\", \"checked\", \"checked\", 1, \"toggle-box\"], [1, \"chart-input-form\"], [1, \"data-form\"], [\"id\", \"sample-data\", \"placeholder\", \"Select Sample Data\"], [\"rows\", \"8\", \"id\", \"csv-input\", \"placeholder\", \"Please enter data or drop columns from csv file here (no column titles - see example data in dropdown menu)\"], [\"id\", \"load-data-btn\", 1, \"btn\"], [\"id\", \"reset-btn\", 1, \"btn\"], [\"id\", \"upload-btn\", 1, \"btn\"], [\"type\", \"file\", \"id\", \"fileInput\", 2, \"display\", \"none\"], [\"rows\", \"10\", \"id\", \"original-data-display\", \"readonly\", \"\"], [\"id\", \"original-mean\", 1, \"center-num\"], [\"id\", \"original-std\", 1, \"center-num\"], [\"id\", \"originalsize\", 1, \"center-num\"], [1, \"chart-wrap\"], [\"id\", \"original-data-chart\"], [\"for\", \"sample-size\"], [\"type\", \"number\", \"min\", \"1\", \"step\", \"1\", \"id\", \"sample-size\", \"value\", \"10\"], [\"for\", \"no-of-sample\"], [\"type\", \"number\", \"min\", \"1\", \"step\", \"1\", \"id\", \"no-of-sample\", \"value\", \"1\"], [\"id\", \"run-sim-btn\", 1, \"btn\"], [\"id\", \"run-sim-error-msg\"], [\"rows\", \"10\", \"readonly\", \"\", \"id\", \"most-recent-sample-display\"], [\"id\", \"sample-mean\", 1, \"center-num\"], [\"id\", \"drawsample-std\", 1, \"center-num\"], [\"id\", \"sample-data-chart\"], [\"for\", \"min-tailValue\"], [\"type\", \"number\", \"id\", \"min-tailValue\", \"value\", \"0\"], [\"type\", \"checkbox\", \"id\", \"includeMin\"], [\"for\", \"max-tailValue\"], [\"type\", \"number\", \"id\", \"max-tailValue\", \"value\", \"1\"], [\"type\", \"checkbox\", \"id\", \"includeMax\"], [\"id\", \"chosen-sample-means\", 1, \"center-num\"], [\"id\", \"unchosen-sample-means\", 1, \"center-num\"], [\"rows\", \"10\", \"readonly\", \"\", \"id\", \"samples-mean-display\"], [\"id\", \"samples-mean\", 1, \"center-num\"], [\"id\", \"samplemeans-std\", 1, \"center-num\"], [\"id\", \"total-samples\", 1, \"center-num\"], [\"id\", \"statistic-data-chart\"]],\n    template: function OneMeanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"one-mean works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"h1\", 1);\n        i0.ɵɵtext(4, \" One Mean Hypothesis Testing\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"h3\", 2);\n        i0.ɵɵtext(6, \"1. Enter Data:\");\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 5);\n        i0.ɵɵelement(10, \"select\", 6)(11, \"textarea\", 7);\n        i0.ɵɵelementStart(12, \"button\", 8);\n        i0.ɵɵtext(13, \"Load Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 9);\n        i0.ɵɵtext(15, \"Reset\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 10);\n        i0.ɵɵtext(17, \" Upload\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 11)(19, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 5);\n        i0.ɵɵelement(21, \"textarea\", 12);\n        i0.ɵɵelementStart(22, \"p\");\n        i0.ɵɵtext(23, \"Mean: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"p\", 13);\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"p\");\n        i0.ɵɵtext(27, \"Standard Deviation: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"p\", 14);\n        i0.ɵɵtext(29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"p\");\n        i0.ɵɵtext(31, \"Size \");\n        i0.ɵɵelementStart(32, \"i\");\n        i0.ɵɵtext(33, \"N\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(34, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"p\", 15);\n        i0.ɵɵtext(36);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 16);\n        i0.ɵɵelement(38, \"canvas\", 17);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(39, \"hr\");\n        i0.ɵɵelementStart(40, \"h3\");\n        i0.ɵɵtext(41, \"2. Sim Section\");\n        i0.ɵɵelement(42, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"div\", 4)(44, \"div\", 5)(45, \"label\", 18);\n        i0.ɵɵtext(46, \" Sample Size\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(47, \"input\", 19);\n        i0.ɵɵelementStart(48, \"label\", 20);\n        i0.ɵɵtext(49, \" Number of Simulations\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(50, \"input\", 21)(51, \"br\");\n        i0.ɵɵelementStart(52, \"button\", 22);\n        i0.ɵɵtext(53, \"Run Simulation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(54, \"p\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"div\", 5);\n        i0.ɵɵelement(56, \"textarea\", 24);\n        i0.ɵɵelementStart(57, \"p\");\n        i0.ɵɵtext(58, \"Mean \");\n        i0.ɵɵelementStart(59, \"i\");\n        i0.ɵɵtext(60, \"x\\u0304\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(61, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"p\", 25);\n        i0.ɵɵtext(63);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"p\");\n        i0.ɵɵtext(65, \"Standard Deviation \");\n        i0.ɵɵelementStart(66, \"i\");\n        i0.ɵɵtext(67, \"s\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(68, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(69, \"p\", 26);\n        i0.ɵɵtext(70);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(71, \"div\", 16);\n        i0.ɵɵelement(72, \"canvas\", 27);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(73, \"hr\");\n        i0.ɵɵelementStart(74, \"h3\");\n        i0.ɵɵtext(75);\n        i0.ɵɵelement(76, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"div\", 4)(78, \"div\", 5)(79, \"p\");\n        i0.ɵɵtext(80);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"label\", 28);\n        i0.ɵɵtext(82, \"Set Min\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(83, \"input\", 29);\n        i0.ɵɵelementStart(84, \"label\", 28);\n        i0.ɵɵtext(85, \"Inlcude Min\");\n        i0.ɵɵelement(86, \"input\", 30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(87, \"br\");\n        i0.ɵɵelementStart(88, \"label\", 31);\n        i0.ɵɵtext(89, \"Set Max\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(90, \"input\", 32);\n        i0.ɵɵelementStart(91, \"label\", 28);\n        i0.ɵɵtext(92, \"Include Max\");\n        i0.ɵɵelement(93, \"input\", 33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(94, \"br\");\n        i0.ɵɵelementStart(95, \"p\");\n        i0.ɵɵtext(96, \"Proportion Chosen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(97, \"p\", 34);\n        i0.ɵɵtext(98);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(99, \"p\");\n        i0.ɵɵtext(100, \"Proportion Unchosen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(101, \"p\", 35);\n        i0.ɵɵtext(102);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(103, \"div\", 5);\n        i0.ɵɵelement(104, \"textarea\", 36);\n        i0.ɵɵelementStart(105, \"p\");\n        i0.ɵɵtext(106, \"Mean Of Sample Means\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(107, \"p\", 37);\n        i0.ɵɵtext(108);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(109, \"p\");\n        i0.ɵɵtext(110, \"STD Of Means\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(111, \"p\", 38);\n        i0.ɵɵtext(112);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(113, \"p\");\n        i0.ɵɵtext(114, \"Total Samples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(115, \"p\", 39);\n        i0.ɵɵtext(116);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(117, \"div\", 16);\n        i0.ɵɵelement(118, \"canvas\", 40);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(25);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(27);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"3. \", \"oneMean.chartTitle4\", \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(\"oneMean.descripInterval\");\n        i0.ɵɵadvance(18);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(\"oneMean.noData\");\n      }\n    },\n    styles: [\"#one-mean[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin-top: 1ch;\\n  width: 100%;\\n}\\n#one-mean[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]   .toggle-box[_ngcontent-%COMP%] {\\n  float: right;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   .data-form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n  width: 38ch;\\n  padding: 5px;\\n  margin-bottom: 10px;\\n  text-align: justify;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   .data-form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin-top: 1px;\\n  margin-bottom: 1px;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   .data-form[_ngcontent-%COMP%]   .center-num[_ngcontent-%COMP%] {\\n  text-align: center;\\n  float: right;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   #run-sim-error-msg[_ngcontent-%COMP%] {\\n  color: red;\\n  text-align: center;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   .chart-wrap[_ngcontent-%COMP%] {\\n  flex: 8;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], #one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   input[type=number][_ngcontent-%COMP%] {\\n  padding: 0.4rem;\\n  border-radius: 5px;\\n  display: inline-block;\\n}\\n#one-mean[_ngcontent-%COMP%]   .chart-input-form[_ngcontent-%COMP%]   input[type=range][_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n#one-mean[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\n  margin-top: 1px;\\n  margin-bottom: 1px;\\n}\\n#one-mean[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%] {\\n  margin: 2px;\\n  border-radius: 5px;\\n}\\n#one-mean[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n  padding: 0.4rem;\\n  margin: 2px;\\n  border-radius: 5px;\\n}\\n\\n#page-title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 1ch;\\n  margin-bottom: 1ch;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvb25lLW1lYW4vb25lLW1lYW4uY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8uLi9DU0MlMjAxOTAvU0FWSVMlMjAzL3NhdmlzMy9TYXZpczMvc3JjL2FwcC9mZWF0dXJlcy9vbmUtbWVhbi9vbmUtbWVhbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSTtFQUNFLGVBQUE7RUFDQSxXQUFBO0FDQU47QURDTTtFQUNFLFlBQUE7QUNDUjtBREVJO0VBQ0UsYUFBQTtBQ0FOO0FERU07RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxPQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLG1CQUFBO0FDQVI7QURDUTtFQUNFLGVBQUE7RUFDQSxrQkFBQTtBQ0NWO0FEQ1E7RUFDRSxrQkFBQTtFQUNBLFlBQUE7QUNDVjtBREVNO0VBQ0UsVUFBQTtFQUNBLGtCQUFBO0FDQVI7QURFTTtFQUNFLE9BQUE7QUNBUjtBREVNOztFQUVFLGVBQUE7RUFDQSxrQkFBQTtFQUNBLHFCQUFBO0FDQVI7QURFTTtFQUNFLGVBQUE7QUNBUjtBREdJO0VBQ0UsZUFBQTtFQUNBLGtCQUFBO0FDRE47QURHSTtFQUNFLFdBQUE7RUFDQSxrQkFBQTtBQ0ROO0FER0k7RUFDRSxlQUFBO0VBQ0EsV0FBQTtFQUNBLGtCQUFBO0FDRE47O0FES0U7RUFDRSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtBQ0ZKIiwic291cmNlc0NvbnRlbnQiOlsiI29uZS1tZWFuIHtcbiAgICBoMyB7XG4gICAgICBtYXJnaW4tdG9wOiAxY2g7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIC50b2dnbGUtYm94IHtcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgICAuY2hhcnQtaW5wdXQtZm9ybSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgLy8gYm9yZGVyLWJvdHRvbTogM3B4IGdyZWVuIHNvbGlkO1xuICAgICAgLmRhdGEtZm9ybSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIHdpZHRoOiAzOGNoO1xuICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgICAgIHAge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDFweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcHg7XG4gICAgICAgIH1cbiAgICAgICAgLmNlbnRlci1udW0ge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICNydW4tc2ltLWVycm9yLW1zZyB7XG4gICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIH1cbiAgICAgIC5jaGFydC13cmFwIHtcbiAgICAgICAgZmxleDogODtcbiAgICAgIH1cbiAgICAgIGxhYmVsLFxuICAgICAgaW5wdXRbdHlwZT1cIm51bWJlclwiXSB7XG4gICAgICAgIHBhZGRpbmc6IDAuNHJlbTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB9XG4gICAgICBpbnB1dFt0eXBlPVwicmFuZ2VcIl0ge1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICB9XG4gICAgfVxuICAgIC5idG4ge1xuICAgICAgbWFyZ2luLXRvcDogMXB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMXB4O1xuICAgIH1cbiAgICB0ZXh0YXJlYSB7XG4gICAgICBtYXJnaW46IDJweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICB9XG4gICAgc2VsZWN0IHtcbiAgICAgIHBhZGRpbmc6IDAuNHJlbTtcbiAgICAgIG1hcmdpbjogMnB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIH1cbiAgfVxuXG4gICNwYWdlLXRpdGxlIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLXRvcDogMWNoO1xuICAgIG1hcmdpbi1ib3R0b206IDFjaDtcbiAgfSIsIiNvbmUtbWVhbiBoMyB7XG4gIG1hcmdpbi10b3A6IDFjaDtcbiAgd2lkdGg6IDEwMCU7XG59XG4jb25lLW1lYW4gaDMgLnRvZ2dsZS1ib3gge1xuICBmbG9hdDogcmlnaHQ7XG59XG4jb25lLW1lYW4gLmNoYXJ0LWlucHV0LWZvcm0ge1xuICBkaXNwbGF5OiBmbGV4O1xufVxuI29uZS1tZWFuIC5jaGFydC1pbnB1dC1mb3JtIC5kYXRhLWZvcm0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmbGV4OiAxO1xuICB3aWR0aDogMzhjaDtcbiAgcGFkZGluZzogNXB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xufVxuI29uZS1tZWFuIC5jaGFydC1pbnB1dC1mb3JtIC5kYXRhLWZvcm0gcCB7XG4gIG1hcmdpbi10b3A6IDFweDtcbiAgbWFyZ2luLWJvdHRvbTogMXB4O1xufVxuI29uZS1tZWFuIC5jaGFydC1pbnB1dC1mb3JtIC5kYXRhLWZvcm0gLmNlbnRlci1udW0ge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZsb2F0OiByaWdodDtcbn1cbiNvbmUtbWVhbiAuY2hhcnQtaW5wdXQtZm9ybSAjcnVuLXNpbS1lcnJvci1tc2cge1xuICBjb2xvcjogcmVkO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4jb25lLW1lYW4gLmNoYXJ0LWlucHV0LWZvcm0gLmNoYXJ0LXdyYXAge1xuICBmbGV4OiA4O1xufVxuI29uZS1tZWFuIC5jaGFydC1pbnB1dC1mb3JtIGxhYmVsLFxuI29uZS1tZWFuIC5jaGFydC1pbnB1dC1mb3JtIGlucHV0W3R5cGU9bnVtYmVyXSB7XG4gIHBhZGRpbmc6IDAuNHJlbTtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG4jb25lLW1lYW4gLmNoYXJ0LWlucHV0LWZvcm0gaW5wdXRbdHlwZT1yYW5nZV0ge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4jb25lLW1lYW4gLmJ0biB7XG4gIG1hcmdpbi10b3A6IDFweDtcbiAgbWFyZ2luLWJvdHRvbTogMXB4O1xufVxuI29uZS1tZWFuIHRleHRhcmVhIHtcbiAgbWFyZ2luOiAycHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbn1cbiNvbmUtbWVhbiBzZWxlY3Qge1xuICBwYWRkaW5nOiAwLjRyZW07XG4gIG1hcmdpbjogMnB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG59XG5cbiNwYWdlLXRpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAxY2g7XG4gIG1hcmdpbi1ib3R0b206IDFjaDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}\nexport class OneMean {\n  constructor(OneMeanDiv, translation) {\n    this.shiftMean = 0;\n    this.mulFactor = 0;\n    //this.populationData = [];\n    this.populationMean = undefined;\n    this.originalData = [];\n    this.mostRecentDraw = [];\n    this.sampleMeans = [];\n    this.sampleSize = undefined;\n    this.translationData = undefined;\n    this.tailDirection = null;\n    this.scaleValues = [];\n    this.dataReserv = [];\n    this.translationData = translation.oneMean;\n    this.sampleMeansChartLabel = null;\n    this.ele = {\n      csvTextArea: OneMeanDiv.querySelector(\"#csv-input\"),\n      loadDataBtn: OneMeanDiv.querySelector(\"#load-data-btn\"),\n      //shiftMeanInput: OneMeanDiv.querySelector(\"#shiftMeanInput\"),\n      originalDataDisplay: OneMeanDiv.querySelector(\"#original-data-display\"),\n      /*populationDataDisplay: OneMeanDiv.querySelector(\n        \"#population-data-display\"\n      ),*/\n      recentSampleDisplay: OneMeanDiv.querySelector(\"#most-recent-sample-display\"),\n      sampleMeansDisplay: OneMeanDiv.querySelector(\"#samples-mean-display\"),\n      sampleMean: OneMeanDiv.querySelector(\"#sample-mean\"),\n      samplesMean: OneMeanDiv.querySelector(\"#samples-mean\"),\n      originalMean: OneMeanDiv.querySelector(\"#original-mean\"),\n      /*polulationMean: OneMeanDiv.querySelector(\"#population-mean\"),\n      mulFactorDisplay: OneMeanDiv.querySelector(\"#mul-factor-display\"),\n      mulFactorSlider: OneMeanDiv.querySelector(\"#mul-factor\"),*/\n      runSimBtn: OneMeanDiv.querySelector(\"#run-sim-btn\"),\n      drawSampleStd: OneMeanDiv.querySelector(\"#drawsample-std\"),\n      sampleSizeInput: OneMeanDiv.querySelector(\"#sample-size\"),\n      noOfSampleInput: OneMeanDiv.querySelector(\"#no-of-sample\"),\n      //Eliminar los dos siguientes\n      /*tailValueInput: OneMeanDiv.querySelector(\"#tailValue\"),\n      tailDirectionInput: OneMeanDiv.querySelector(\"#tailDirection\"),*/\n      // Se agregan estos cinco\n      minTailValInput: OneMeanDiv.querySelector(\"#min-tailValue\"),\n      maxTailValInput: OneMeanDiv.querySelector(\"#max-tailValue\"),\n      includeValMin: OneMeanDiv.querySelector(\"#includeMin\"),\n      includeValMax: OneMeanDiv.querySelector(\"#includeMax\"),\n      chosensampleMeans: OneMeanDiv.querySelector(\"#chosen-sample-means\"),\n      unchosensampleMeans: OneMeanDiv.querySelector(\"#unchosen-sample-means\"),\n      /*totalSelectedSamplesDisplay: OneMeanDiv.querySelector(\n        \"#total-selected-samples\"\n      ),*/\n      totalSamplesDisplay: OneMeanDiv.querySelector(\"#total-samples\"),\n      //proportionDisplay: OneMeanDiv.querySelector(\"#proportion\"),\n      oneMeanDiv: OneMeanDiv,\n      runSimErrorMsg: OneMeanDiv.querySelector(\"#run-sim-error-msg\"),\n      sampleDataDropDown: OneMeanDiv.querySelector(\"#sample-data\"),\n      resetBtn: OneMeanDiv.querySelector(\"#reset-btn\"),\n      translationData: OneMeanDiv.querySelector(\"#translation-data\"),\n      originalStd: OneMeanDiv.querySelector(\"#original-std\"),\n      sampleMeansStd: OneMeanDiv.querySelector(\"#samplemeans-std\"),\n      //populationStd: OneMeanDiv.querySelector(\"#population-std\"),\n      uploadbtn: OneMeanDiv.querySelector(\"#upload-btn\"),\n      fileInput: OneMeanDiv.querySelector(\"#fileInput\"),\n      size: OneMeanDiv.querySelector(\"#originalsize\")\n    };\n    // this.readTranlationData();\n    enableUploadDataFile(this.ele.uploadbtn, this.ele.fileInput, this.ele.csvTextArea);\n    this.datasets = [{\n      label: this.translationData.original,\n      backgroundColor: \"orange\",\n      data: []\n    }, {\n      label: this.translationData.hypotheticalPopulation,\n      backgroundColor: \"orange\",\n      data: []\n    }, {\n      label: this.translationData.mostRecentDraw,\n      backgroundColor: \"blue\",\n      data: []\n    }, [{\n      label: this.translationData.sampleMeans,\n      backgroundColor: \"green\",\n      data: []\n    }, {\n      label: \"N/A\",\n      backgroundColor: \"red\",\n      data: []\n    }]];\n    this.dataChart1 = new StackedDotChart(OneMeanDiv.querySelector(\"#original-data-chart\"), [this.datasets[0]]);\n    /*this.dataChart2 = new StackedDotChart(\n      OneMeanDiv.querySelector(\"#population-data-chart\"),\n      [this.datasets[1]]\n    );*/\n    //this.dataChart2.setAnimationDuration(0);\n    this.dataChart3 = new StackedDotChart(OneMeanDiv.querySelector(\"#sample-data-chart\"), [this.datasets[2]]);\n    this.dataChart3.setAnimationDuration(0);\n    this.dataChart4 = new StackedDotChart(OneMeanDiv.querySelector(\"#statistic-data-chart\"), this.datasets[3]);\n    this.dataChart4.setAnimationDuration(0);\n    this.dataName = {\n      orginalData: \"orginalData\",\n      populationData: \"populationData\",\n      mostRecentDraw: \"mostRecentDraw\",\n      sampleMeans: \"sampleMeans\"\n    };\n    [this.dataChart1, /*this.dataChart2,*/this.dataChart3, this.dataChart4].forEach((plt, idx) => {\n      plt.chart.options.scales.xAxes[0].scaleLabel.labelString = idx < 3 ? this.translationData.xAxisTitle1 : this.translationData.xAxisTitle2;\n      plt.chart.options.scales.yAxes[0].scaleLabel.labelString = this.translationData.yAxisTitle;\n    });\n    this.loadEventListener = () => {\n      this.ele.loadDataBtn.addEventListener(\"click\", e => {\n        this.originalData = parseCSVtoSingleArray(this.ele.csvTextArea.value);\n        this.updateData(this.dataName.orginalData);\n        this.shiftMean = 0;\n        this.mulFactor = 0;\n        this.ele.size.innerText = this.originalData.length;\n        this.clearResult();\n        /*this.updatedPopulationData(\n          this.originalData,\n          this.shiftMean,\n          this.mulFactor\n        );*/\n        e.preventDefault();\n      });\n      dropTextFileOnTextArea(this.ele.csvTextArea);\n      this.sampleListListener();\n      /*this.shiftMeanListener();\n      this.mulFactorListener();*/\n      this.resetBtnListener();\n      this.ele.runSimBtn.addEventListener(\"click\", e => {\n        const newSampleSize = Number(this.ele.sampleSizeInput.value);\n        const noOfSamples = Number(this.ele.noOfSampleInput.value);\n        this.runSim(newSampleSize, noOfSamples);\n        e.preventDefault();\n      });\n      /* Eliminar esta función\n      this.ele.tailDirectionInput.addEventListener(\"change\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });*/\n      // Agregar estas tres\n      this.ele.minTailValInput.addEventListener(\"input\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });\n      this.ele.maxTailValInput.addEventListener(\"input\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });\n      /*this.ele.createIntervBtn.addEventListener(\"click\", e => {\n        e.preventDefault();\n      });*/\n      /* Eliminar esta función\n      this.ele.tailValueInput.addEventListener(\"input\", e => {\n      });\n             this.ele.shiftMeanInput.addEventListener(\"click\", e =>{\n        console.log(e.target.checked);\n      });\n             this.ele.shiftMeanInput.addEventListener(\"input\", e => {\n        this.updatedPopulationData(\n          this.originalData,\n          Number(e.target.value) || 0,\n          this.mulFactor\n        );\n        //this.clearResult();\n      });*/\n      this.ele.oneMeanDiv.addEventListener(\"click\", e => {\n        if (e.target.className === \"toggle-box\") {\n          const div = e.target.parentElement.nextElementSibling;\n          div.style.display = div.style.display === \"none\" ? \"flex\" : \"none\";\n        }\n        /*if (e.target.id == 'min-MeanTab'){\n          this.ele.minTailValInput.value = MathUtil.minInArray(this.sampleMeans);\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }\n        if (e.target.id == 'max-MeanTab'){\n          this.ele.maxTailValInput.value = MathUtil.maxInArray(this.sampleMeans);\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }*/\n        if (e.target.id == 'includeMin' || e.target.id == 'includeMax') {\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }\n      });\n    };\n    this.loadSampleDataList();\n    this.loadEventListener();\n  }\n  loadSampleDataList() {\n    const path = [null, \"../sampleData/sample1.csv\", \"../sampleData/sample2.csv\"];\n    [this.translationData.selectData, this.translationData.selectOpt1, this.translationData.selectOpt2].forEach((val, idx) => {\n      const option = document.createElement(\"option\", {});\n      option.setAttribute(\"value\", path[idx]);\n      option.innerText = val;\n      this.ele.sampleDataDropDown.appendChild(option);\n    });\n  }\n  runSim(sampleSize, noOfSample) {\n    // if (this.populationData.length === 0) return;\n    const newMeanSamples = [];\n    try {\n      //if (!this.populationData.length) throw this.translationData.errorNoPopulation;\n      if (!this.originalData.length) throw this.translationData.errorNoPopulation;\n      for (let i = 0; i < noOfSample; i++) {\n        const {\n          chosen,\n          unchoosen\n        } = randomSubset(\n        //this.populationData,\n        this.originalData, sampleSize);\n        const roundedMean = MathUtil.roundToPlaces(MathUtil.mean(chosen.map(x => x.value)), 3);\n        newMeanSamples.push(roundedMean);\n        if (i === noOfSample - 1) this.mostRecentDraw = chosen;\n      }\n      if (this.sampleSize !== sampleSize) {\n        this.sampleSize = sampleSize;\n        this.sampleMeans = newMeanSamples;\n      } else {\n        this.sampleMeans = this.sampleMeans.concat(newMeanSamples);\n      }\n      const minNumber = MathUtil.minInArray(this.sampleMeans);\n      const maxNumber = MathUtil.maxInArray(this.sampleMeans);\n      this.ele.minTailValInput.value = minNumber % 1 == 0 ? minNumber - 1 : Math.floor(minNumber);\n      this.ele.maxTailValInput.value = maxNumber % 1 == 0 ? maxNumber + 1 : Math.ceil(maxNumber);\n    } catch (err) {\n      let errMsg = \"ERROR\\n\";\n      //if (this.populationData.length)\n      if (this.originalData.length) errMsg += this.translationData.errorNotEnoughElements;else errMsg += this.translationData.errorNoPopulation;\n      this.ele.runSimErrorMsg.innerText = errMsg;\n      setTimeout(() => {\n        this.ele.runSimErrorMsg.innerText = \"\";\n      }, 2000);\n    }\n    this.updateData(this.dataName.mostRecentDraw);\n    this.updateData(this.dataName.sampleMeans);\n  }\n  resetBtnListener() {\n    this.ele.resetBtn.addEventListener(\"click\", e => {\n      this.clearResult();\n      this.ele.csvTextArea.value = \"\";\n      this.originalData = [];\n      this.updateData(this.dataName.orginalData);\n      this.shiftMean = 0;\n      this.mulFactor = 0;\n      this.ele.size.innerText = 0;\n      this.clearResult();\n      this.ele.sampleDataDropDown.selectedIndex = 0;\n      /*this.updatedPopulationData(\n        this.originalData,\n        this.shiftMean,\n        this.mulFactor\n      );*/\n      e.preventDefault();\n    });\n  }\n  sampleListListener() {\n    this.ele.sampleDataDropDown.addEventListener(\"change\", () => {\n      if (this.ele.sampleDataDropDown.value != this.translationData.selectData) {\n        readLocalFile(this.ele.sampleDataDropDown.value).then(text => this.ele.csvTextArea.value = text);\n      } else this.ele.csvTextArea.value = \"\";\n    });\n  }\n  /*shiftMeanListener() {\n    alert(this.ele.shiftMeanInput.value);\n    this.updatedPopulationData(\n      this.originalData,\n      //Number(e.target.value) || 0,\n      Number(this.ele.shiftMeanInput.value) || 0,\n      this.mulFactor\n    );\n    this.clearResult();\n    //this.ele.shiftMeanInput.addEventListener(\"input\", e => {});\n  }\n     mulFactorListener() {\n    this.ele.mulFactorSlider.addEventListener(\"change\", e => {\n      const mulFactor = Number(e.target.value);\n      //this.ele.mulFactorDisplay.innerText = mulFactor;\n    });\n    this.ele.mulFactorSlider.addEventListener(\"input\", e => {\n      const mulFactor = Number(e.target.value);\n      this.updatedPopulationData(this.originalData, this.shiftMean, mulFactor);\n      //this.ele.mulFactorDisplay.innerText = mulFactor;\n      this.clearResult();\n    });\n  }*/\n  /*updatedPopulationData(originalData, shift, mulFactor) {\n    this.shiftMean = shift;\n    //this.ele.shiftMeanInput.value = shift;\n    this.mulFactor = mulFactor;\n    this.populationData = [];\n    originalData.forEach(x => {\n      for (let i = 0; i <= mulFactor; i++){\n        this.populationData.push({\n          id: (x.id-1)*(mulFactor+1)+i+1,\n          value: MathUtil.roundToPlaces(x.value + shift, 4)\n        })\n      }\n    })\n    this.populationMean = MathUtil.roundToPlaces(MathUtil.mean(this.populationData.map(x => x.value)), 2);\n    //this.ele.populationStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(this.populationData.map(x => x.value)), 2);\n    this.updateData(this.dataName.populationData);\n  }*/\n  clearResult() {\n    /*this.ele.shiftMeanInput.value = this.shiftMean;\n    this.ele.mulFactorSlider.value = this.mulFactor;\n    /this.ele.mulFactorDisplay.innerText = this.mulFactor;*/\n    this.mostRecentDraw = [];\n    this.sampleMeans = [];\n    this.tailDirection = null;\n    //this.ele.tailDirectionInput.value = this.tailDirection;\n    this.updateData(this.dataName.mostRecentDraw);\n    this.updateData(this.dataName.sampleMeans);\n  }\n  //update chart, mean and textarea based on the dataName\n  updateData(dataName) {\n    let chart, data, meanEle, /*key,*/textAreaEle;\n    if (dataName === this.dataName.orginalData) {\n      chart = this.dataChart1;\n      data = this.originalData;\n      meanEle = this.ele.originalMean;\n      textAreaEle = this.ele.originalDataDisplay;\n      //this.ele.originalStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(data.map(x => x.value)), 2);\n      this.ele.originalStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(data.map(x => x.value)), 2);\n      this.scaleValues = [MathUtil.minInArray(data.map(x => x.value)), MathUtil.maxInArray(data.map(x => x.value))];\n    } /*else if (dataName === this.dataName.populationData) {\n      chart = this.dataChart2;\n      data = this.populationData;\n      meanEle = this.ele.polulationMean;\n      textAreaEle = this.ele.populationDataDisplay;\n      }*/else if (dataName === this.dataName.mostRecentDraw) {\n      chart = this.dataChart3;\n      data = this.mostRecentDraw;\n      meanEle = this.ele.sampleMean;\n      textAreaEle = this.ele.recentSampleDisplay;\n      this.ele.drawSampleStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(data.map(x => x.value)), 2);\n    } else {\n      chart = this.dataChart4;\n      data = this.sampleMeans;\n      meanEle = this.ele.samplesMean;\n      textAreaEle = this.ele.sampleMeansDisplay;\n      this.ele.sampleMeansStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(data), 2);\n    }\n    // update chart\n    let valuesArr = null;\n    if (data.length) {\n      if (dataName !== this.dataName.sampleMeans) {\n        valuesArr = data.map(x => x.value);\n        chart.setDataFromRaw([valuesArr]);\n      } else {\n        valuesArr = data;\n        //const mean = this.populationMean;*/\n        const {\n          chosen,\n          unchosen\n        } = splitByPredicate(valuesArr, this.predicateForTail(Number(this.ele.minTailValInput.value), Number(this.ele.maxTailValInput.value)));\n        //update statistic output\n        this.updateStatistic(chosen.length, unchosen.length);\n        this.updateSampleMeansChartLabels(this.sampleMeansChartLabel);\n        chart.setDataFromRaw([chosen, unchosen]);\n      }\n      // if (data.length > 500) chart.setAnimationDuration(0);\n      // else chart.setAnimationDuration(1000);\n      if (valuesArr.length < 1000) chart.changeDotAppearance(5, undefined);else chart.changeDotAppearance(3, undefined);\n      //if (dataName===this.dataName.mostRecentDraw)  this.ele.drawSampleStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(valuesArr), 2);\n      if (dataName === this.dataName.orginalData || dataName === this.dataName.sampleMeans) chart.setScale(MathUtil.minInArray(valuesArr), MathUtil.maxInArray(valuesArr));else chart.setScale(this.scaleValues[0], this.scaleValues[1]);\n    } else chart.clear();\n    chart.scaleToStackDots();\n    chart.chart.update();\n    //update mean output\n    const mean = data.length ? MathUtil.roundToPlaces(MathUtil.mean(valuesArr), 2) : this.translationData.noData;\n    meanEle.innerText = mean;\n    /*if (dataName === this.dataName.orginalData && !isNaN(mean)) {\n      this.ele.tailValueInput.value = mean;\n    }*/\n    // update text area output\n    if (dataName !== this.dataName.sampleMeans) {\n      textAreaEle.value = data.reduce((acc, x) => acc + `${x.id}`.padEnd(8, ' ') + `${x.value}\\n`, `${this.translationData.id}`.padEnd(8, ' ') + `${this.translationData.value}\\n`);\n    } else {\n      textAreaEle.value = data.reduce((acc, x, index) => acc + `${index + 1}`.padEnd(8, ' ') + `${x}\\n`, `${this.translationData.id}`.padEnd(8, ' ') + `${this.translationData.mean}\\n`);\n    }\n  }\n  updateStatistic(totalChosen, totalUnchosen) {\n    const totalSamples = totalChosen + totalUnchosen;\n    const proportionChosen = MathUtil.roundToPlaces(totalChosen / totalSamples, 4);\n    const proportionUnchosen = MathUtil.roundToPlaces(totalUnchosen / totalSamples, 4);\n    //this.ele.totalSelectedSamplesDisplay.innerText = totalChosen;\n    this.ele.totalSamplesDisplay.innerText = totalSamples;\n    this.ele.chosensampleMeans.innerText = `${totalChosen} / ${totalSamples} = ${proportionChosen}`;\n    this.ele.unchosensampleMeans.innerText = `${totalUnchosen} / ${totalSamples} = ${proportionUnchosen}`;\n  }\n  predicateForTail(left, right) {\n    if (this.ele.includeValMin.checked && this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'closed';\n      return function (x) {\n        return x >= left && x <= right;\n      };\n    } else if (this.ele.includeValMin.checked && !this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'left';\n      return function (x) {\n        return x >= left && x < right;\n      };\n    } else if (!this.ele.includeValMin.checked && this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'right';\n      return function (x) {\n        return x > left && x <= right;\n      };\n    } else if (!this.ele.includeValMin.checked && !this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'open';\n      return function (x) {\n        return x > left && x < right;\n      };\n    } else return null;\n  }\n  updateSampleMeansChartLabels(intervalType) {\n    const sampleName = this.translationData.sampleMeans;\n    if (intervalType === \"closed\") {\n      this.dataChart4.updateLabelName(0, Number(this.ele.minTailValInput.value) + ' ≤ ' + sampleName + ' ≤ ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1, sampleName + ' < ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' < ' + sampleName);\n    } else if (intervalType === \"left\") {\n      this.dataChart4.updateLabelName(0, Number(this.ele.minTailValInput.value) + ' ≤ ' + sampleName + ' < ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1, sampleName + ' < ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' ≤ ' + sampleName);\n    } else if (intervalType === \"right\") {\n      this.dataChart4.updateLabelName(0, Number(this.ele.minTailValInput.value) + ' < ' + sampleName + ' ≤ ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1, sampleName + ' ≤ ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' < ' + sampleName);\n    } else if (intervalType === \"open\") {\n      this.dataChart4.updateLabelName(0, Number(this.ele.minTailValInput.value) + ' < ' + sampleName + ' < ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1, sampleName + ' ≤ ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' ≤ ' + sampleName);\n    } else {\n      this.dataChart4.updateLabelName(0, sampleName);\n      this.dataChart4.updateLabelName(1, \"N/A\");\n    }\n  }\n}","map":{"version":3,"names":["OneMeanComponent","constructor","ngOnInit","_","_2","selectors","decls","vars","consts","template","OneMeanComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate1","OneMean","OneMeanDiv","translation","shiftMean","mulFactor","populationMean","undefined","originalData","mostRecentDraw","sampleMeans","sampleSize","translationData","tailDirection","scaleValues","dataReserv","oneMean","sampleMeansChartLabel","ele","csvTextArea","querySelector","loadDataBtn","originalDataDisplay","recentSampleDisplay","sampleMeansDisplay","sampleMean","samplesMean","originalMean","runSimBtn","drawSampleStd","sampleSizeInput","noOfSampleInput","minTailValInput","maxTailValInput","includeValMin","includeValMax","chosensampleMeans","unchosensampleMeans","totalSamplesDisplay","oneMeanDiv","runSimErrorMsg","sampleDataDropDown","resetBtn","originalStd","sampleMeansStd","uploadbtn","fileInput","size","enableUploadDataFile","datasets","label","original","backgroundColor","data","hypotheticalPopulation","dataChart1","StackedDotChart","dataChart3","setAnimationDuration","dataChart4","dataName","orginalData","populationData","forEach","plt","idx","chart","options","scales","xAxes","scaleLabel","labelString","xAxisTitle1","xAxisTitle2","yAxes","yAxisTitle","loadEventListener","addEventListener","e","parseCSVtoSingleArray","value","updateData","innerText","length","clearResult","preventDefault","dropTextFileOnTextArea","sampleListListener","resetBtnListener","newSampleSize","Number","noOfSamples","runSim","target","className","div","parentElement","nextElementSibling","style","display","id","loadSampleDataList","path","selectData","selectOpt1","selectOpt2","val","option","document","createElement","setAttribute","appendChild","noOfSample","newMeanSamples","errorNoPopulation","i","chosen","unchoosen","randomSubset","roundedMean","MathUtil","roundToPlaces","mean","map","x","push","concat","minNumber","minInArray","maxNumber","maxInArray","Math","floor","ceil","err","errMsg","errorNotEnoughElements","setTimeout","selectedIndex","readLocalFile","then","text","meanEle","textAreaEle","stddev","sampleStddev","valuesArr","setDataFromRaw","unchosen","splitByPredicate","predicateForTail","updateStatistic","updateSampleMeansChartLabels","changeDotAppearance","setScale","clear","scaleToStackDots","update","noData","reduce","acc","padEnd","index","totalChosen","totalUnchosen","totalSamples","proportionChosen","proportionUnchosen","left","right","checked","intervalType","sampleName","updateLabelName"],"sources":["/Users/bik/Downloads/School/CSC 190/SAVIS 3/savis3/Savis3/src/app/features/one-mean/one-mean.component.ts","/Users/bik/Downloads/School/CSC 190/SAVIS 3/savis3/Savis3/src/app/features/one-mean/one-mean.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-one-mean',\n  templateUrl: './one-mean.component.html',\n  styleUrls: ['./one-mean.component.scss']\n})\nexport class OneMeanComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\nexport class OneMean {\n  shiftMean: number;\n  mulFactor: number;\n  populationMean: any;\n  originalData: any[];\n  mostRecentDraw: any[];\n  sampleMeans: any[];\n  sampleSize: any;\n  translationData: any;\n  tailDirection: any;\n  scaleValues: any[];\n  dataReserv: any[];\n  sampleMeansChartLabel: any;\n  ele: {\n    csvTextArea: HTMLElement;\n    loadDataBtn: HTMLElement;\n    originalDataDisplay: HTMLElement;\n    recentSampleDisplay: HTMLElement;\n  };\n  \n  constructor(OneMeanDiv: HTMLElement, translation: any) {\n    this.shiftMean = 0;\n    this.mulFactor = 0;\n    //this.populationData = [];\n    this.populationMean = undefined;\n    this.originalData = [];\n    this.mostRecentDraw = [];\n    this.sampleMeans = [];\n    this.sampleSize = undefined;\n    this.translationData = undefined;\n    this.tailDirection = null;\n    this.scaleValues = [];\n    this.dataReserv = [];\n    this.translationData = translation.oneMean;\n    this.sampleMeansChartLabel = null;\n    this.ele = {\n      csvTextArea: OneMeanDiv.querySelector(\"#csv-input\"),\n      loadDataBtn: OneMeanDiv.querySelector(\"#load-data-btn\"),\n      //shiftMeanInput: OneMeanDiv.querySelector(\"#shiftMeanInput\"),\n      originalDataDisplay: OneMeanDiv.querySelector(\"#original-data-display\"),\n      /*populationDataDisplay: OneMeanDiv.querySelector(\n        \"#population-data-display\"\n      ),*/\n      recentSampleDisplay: OneMeanDiv.querySelector(\n        \"#most-recent-sample-display\"\n      ),\n      sampleMeansDisplay: OneMeanDiv.querySelector(\"#samples-mean-display\"),\n      sampleMean: OneMeanDiv.querySelector(\"#sample-mean\"),\n      samplesMean: OneMeanDiv.querySelector(\"#samples-mean\"),\n      originalMean: OneMeanDiv.querySelector(\"#original-mean\"),\n      /*polulationMean: OneMeanDiv.querySelector(\"#population-mean\"),\n      mulFactorDisplay: OneMeanDiv.querySelector(\"#mul-factor-display\"),\n      mulFactorSlider: OneMeanDiv.querySelector(\"#mul-factor\"),*/\n      runSimBtn: OneMeanDiv.querySelector(\"#run-sim-btn\"),\n      drawSampleStd: OneMeanDiv.querySelector(\"#drawsample-std\"),\n      sampleSizeInput: OneMeanDiv.querySelector(\"#sample-size\"),\n      noOfSampleInput: OneMeanDiv.querySelector(\"#no-of-sample\"),\n      //Eliminar los dos siguientes\n      /*tailValueInput: OneMeanDiv.querySelector(\"#tailValue\"),\n      tailDirectionInput: OneMeanDiv.querySelector(\"#tailDirection\"),*/\n\n      // Se agregan estos cinco\n      minTailValInput: OneMeanDiv.querySelector(\"#min-tailValue\"),\n      maxTailValInput: OneMeanDiv.querySelector(\"#max-tailValue\"),\n      includeValMin: OneMeanDiv.querySelector(\"#includeMin\"),\n      includeValMax: OneMeanDiv.querySelector(\"#includeMax\"),\n      chosensampleMeans: OneMeanDiv.querySelector(\"#chosen-sample-means\"),\n      unchosensampleMeans: OneMeanDiv.querySelector(\"#unchosen-sample-means\"),\n\n      /*totalSelectedSamplesDisplay: OneMeanDiv.querySelector(\n        \"#total-selected-samples\"\n      ),*/\n      totalSamplesDisplay: OneMeanDiv.querySelector(\"#total-samples\"),\n      //proportionDisplay: OneMeanDiv.querySelector(\"#proportion\"),\n      oneMeanDiv: OneMeanDiv,\n      runSimErrorMsg: OneMeanDiv.querySelector(\"#run-sim-error-msg\"),\n      sampleDataDropDown: OneMeanDiv.querySelector(\"#sample-data\"),\n      resetBtn: OneMeanDiv.querySelector(\"#reset-btn\"),\n      translationData: OneMeanDiv.querySelector(\"#translation-data\"),\n      originalStd: OneMeanDiv.querySelector(\"#original-std\"),\n      sampleMeansStd: OneMeanDiv.querySelector(\"#samplemeans-std\"),\n      //populationStd: OneMeanDiv.querySelector(\"#population-std\"),\n      uploadbtn: OneMeanDiv.querySelector(\"#upload-btn\"),\n      fileInput: OneMeanDiv.querySelector(\"#fileInput\"),\n      size: OneMeanDiv.querySelector(\"#originalsize\")\n\n    };\n\n    // this.readTranlationData();\n    enableUploadDataFile(this.ele.uploadbtn, this.ele.fileInput, this.ele.csvTextArea)\n\n    this.datasets = [\n      {\n        label: this.translationData.original,\n        backgroundColor: \"orange\",\n        data: []\n      },\n      {\n        label: this.translationData.hypotheticalPopulation,\n        backgroundColor: \"orange\",\n        data: []\n      },\n      {\n        label: this.translationData.mostRecentDraw,\n        backgroundColor: \"blue\",\n        data: []\n      },\n      [\n        {\n          label: this.translationData.sampleMeans,\n          backgroundColor: \"green\",\n          data: []\n        },\n        { label: \"N/A\", backgroundColor: \"red\", data: [] }\n      ]\n    ];\n\n    this.dataChart1 = new StackedDotChart(\n      OneMeanDiv.querySelector(\"#original-data-chart\"),\n      [this.datasets[0]]\n    );\n    /*this.dataChart2 = new StackedDotChart(\n      OneMeanDiv.querySelector(\"#population-data-chart\"),\n      [this.datasets[1]]\n    );*/\n    //this.dataChart2.setAnimationDuration(0);\n    this.dataChart3 = new StackedDotChart(\n      OneMeanDiv.querySelector(\"#sample-data-chart\"),\n      [this.datasets[2]]\n    );\n    this.dataChart3.setAnimationDuration(0);\n    this.dataChart4 = new StackedDotChart(\n      OneMeanDiv.querySelector(\"#statistic-data-chart\"),\n      this.datasets[3]\n    );\n    this.dataChart4.setAnimationDuration(0);\n    this.dataName = {\n      orginalData: \"orginalData\",\n      populationData: \"populationData\",\n      mostRecentDraw: \"mostRecentDraw\",\n      sampleMeans: \"sampleMeans\"\n    };\n    [this.dataChart1, /*this.dataChart2,*/ this.dataChart3, this.dataChart4].forEach(\n      (plt, idx) => {\n        plt.chart.options.scales.xAxes[0].scaleLabel.labelString = (idx < 3)\n          ? this.translationData.xAxisTitle1\n          : this.translationData.xAxisTitle2;\n        plt.chart.options.scales.yAxes[0].scaleLabel.labelString = this.translationData.yAxisTitle;\n      }\n    );\n    this.loadEventListener = () => {\n      this.ele.loadDataBtn.addEventListener(\"click\", e => {\n        this.originalData = parseCSVtoSingleArray(this.ele.csvTextArea.value);\n        this.updateData(this.dataName.orginalData);\n        this.shiftMean = 0;\n        this.mulFactor = 0;\n        this.ele.size.innerText = this.originalData.length\n        this.clearResult();\n        /*this.updatedPopulationData(\n          this.originalData,\n          this.shiftMean,\n          this.mulFactor\n        );*/\n        e.preventDefault();\n      });\n\n      dropTextFileOnTextArea(this.ele.csvTextArea);\n      this.sampleListListener();\n      /*this.shiftMeanListener();\n      this.mulFactorListener();*/\n      this.resetBtnListener();\n\n      this.ele.runSimBtn.addEventListener(\"click\", e => {\n        const newSampleSize = Number(this.ele.sampleSizeInput.value);\n        const noOfSamples = Number(this.ele.noOfSampleInput.value);\n        this.runSim(newSampleSize, noOfSamples);\n        e.preventDefault();\n      });\n      /* Eliminar esta función\n      this.ele.tailDirectionInput.addEventListener(\"change\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });*/\n\n      // Agregar estas tres\n      this.ele.minTailValInput.addEventListener(\"input\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });\n\n      this.ele.maxTailValInput.addEventListener(\"input\", e => {\n        if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n      });\n\n      /*this.ele.createIntervBtn.addEventListener(\"click\", e => {\n        e.preventDefault();\n      });*/\n\n      /* Eliminar esta función\n      this.ele.tailValueInput.addEventListener(\"input\", e => {\n      });\n\n      this.ele.shiftMeanInput.addEventListener(\"click\", e =>{\n        console.log(e.target.checked);\n      });\n\n      this.ele.shiftMeanInput.addEventListener(\"input\", e => {\n        this.updatedPopulationData(\n          this.originalData,\n          Number(e.target.value) || 0,\n          this.mulFactor\n        );\n        //this.clearResult();\n      });*/\n\n      this.ele.oneMeanDiv.addEventListener(\"click\", e => {\n        if (e.target.className === \"toggle-box\") {\n          const div = e.target.parentElement.nextElementSibling;\n          div.style.display = div.style.display === \"none\" ? \"flex\" : \"none\";\n        }\n        /*if (e.target.id == 'min-MeanTab'){\n          this.ele.minTailValInput.value = MathUtil.minInArray(this.sampleMeans);\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }\n        if (e.target.id == 'max-MeanTab'){\n          this.ele.maxTailValInput.value = MathUtil.maxInArray(this.sampleMeans);\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }*/\n        if (e.target.id == 'includeMin' || e.target.id == 'includeMax') {\n          if (this.sampleMeans.length) this.updateData(this.dataName.sampleMeans);\n        }\n      });\n    };\n    this.loadSampleDataList();\n    this.loadEventListener();\n  }\n\n  loadSampleDataList() {\n    const path = [null, \"../sampleData/sample1.csv\", \"../sampleData/sample2.csv\"];\n    [this.translationData.selectData, this.translationData.selectOpt1, this.translationData.selectOpt2].forEach(\n      (val, idx) => {\n        const option = document.createElement(\"option\", {});\n        option.setAttribute(\"value\", path[idx]);\n        option.innerText = val;\n        this.ele.sampleDataDropDown.appendChild(option);\n      }\n    );\n  }\n\n  runSim(sampleSize, noOfSample) {\n    // if (this.populationData.length === 0) return;\n    const newMeanSamples = [];\n    try {\n      //if (!this.populationData.length) throw this.translationData.errorNoPopulation;\n      if (!this.originalData.length) throw this.translationData.errorNoPopulation;\n      for (let i = 0; i < noOfSample; i++) {\n        const { chosen, unchoosen } = randomSubset(\n          //this.populationData,\n          this.originalData,\n          sampleSize\n        );\n        const roundedMean = MathUtil.roundToPlaces(\n          MathUtil.mean(chosen.map(x => x.value)),\n          3\n        );\n        newMeanSamples.push(roundedMean);\n        if (i === noOfSample - 1) this.mostRecentDraw = chosen;\n      }\n      if (this.sampleSize !== sampleSize) {\n        this.sampleSize = sampleSize;\n        this.sampleMeans = newMeanSamples;\n      } else {\n        this.sampleMeans = this.sampleMeans.concat(newMeanSamples);\n      }\n      const minNumber = MathUtil.minInArray(this.sampleMeans);\n      const maxNumber = MathUtil.maxInArray(this.sampleMeans);\n      this.ele.minTailValInput.value = (minNumber % 1 == 0) ? minNumber - 1 : Math.floor(minNumber);\n      this.ele.maxTailValInput.value = (maxNumber % 1 == 0) ? maxNumber + 1 : Math.ceil(maxNumber);\n    } catch (err) {\n      let errMsg = \"ERROR\\n\"\n      //if (this.populationData.length)\n      if (this.originalData.length)\n        errMsg += this.translationData.errorNotEnoughElements;\n      else\n        errMsg += this.translationData.errorNoPopulation;\n      this.ele.runSimErrorMsg.innerText = errMsg;\n      setTimeout(() => {\n        this.ele.runSimErrorMsg.innerText = \"\";\n      }, 2000);\n    }\n    this.updateData(this.dataName.mostRecentDraw);\n    this.updateData(this.dataName.sampleMeans);\n  }\n\n  resetBtnListener() {\n    this.ele.resetBtn.addEventListener(\"click\", e => {\n      this.clearResult();\n      this.ele.csvTextArea.value = \"\";\n      this.originalData = [];\n      this.updateData(this.dataName.orginalData);\n      this.shiftMean = 0;\n      this.mulFactor = 0;\n      this.ele.size.innerText = 0\n      this.clearResult();\n      this.ele.sampleDataDropDown.selectedIndex = 0;\n      /*this.updatedPopulationData(\n        this.originalData,\n        this.shiftMean,\n        this.mulFactor\n      );*/\n      e.preventDefault();\n    });\n  }\n\n\n  sampleListListener() {\n    this.ele.sampleDataDropDown.addEventListener(\"change\", () => {\n      if (this.ele.sampleDataDropDown.value != this.translationData.selectData) {\n        readLocalFile(this.ele.sampleDataDropDown.value).then(\n          text => (this.ele.csvTextArea.value = text)\n        );\n      } else this.ele.csvTextArea.value = \"\";\n    });\n  }\n\n  /*shiftMeanListener() {\n    alert(this.ele.shiftMeanInput.value);\n    this.updatedPopulationData(\n      this.originalData,\n      //Number(e.target.value) || 0,\n      Number(this.ele.shiftMeanInput.value) || 0,\n      this.mulFactor\n    );\n    this.clearResult();\n    //this.ele.shiftMeanInput.addEventListener(\"input\", e => {});\n  }\n\n  mulFactorListener() {\n    this.ele.mulFactorSlider.addEventListener(\"change\", e => {\n      const mulFactor = Number(e.target.value);\n      //this.ele.mulFactorDisplay.innerText = mulFactor;\n    });\n    this.ele.mulFactorSlider.addEventListener(\"input\", e => {\n      const mulFactor = Number(e.target.value);\n      this.updatedPopulationData(this.originalData, this.shiftMean, mulFactor);\n      //this.ele.mulFactorDisplay.innerText = mulFactor;\n      this.clearResult();\n    });\n  }*/\n\n  /*updatedPopulationData(originalData, shift, mulFactor) {\n    this.shiftMean = shift;\n    //this.ele.shiftMeanInput.value = shift;\n    this.mulFactor = mulFactor;\n    this.populationData = [];\n    originalData.forEach(x => {\n      for (let i = 0; i <= mulFactor; i++){\n        this.populationData.push({\n          id: (x.id-1)*(mulFactor+1)+i+1,\n          value: MathUtil.roundToPlaces(x.value + shift, 4)\n        })\n      }\n    })\n    this.populationMean = MathUtil.roundToPlaces(MathUtil.mean(this.populationData.map(x => x.value)), 2);\n    //this.ele.populationStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(this.populationData.map(x => x.value)), 2);\n    this.updateData(this.dataName.populationData);\n  }*/\n\n  clearResult() {\n    /*this.ele.shiftMeanInput.value = this.shiftMean;\n    this.ele.mulFactorSlider.value = this.mulFactor;\n    /this.ele.mulFactorDisplay.innerText = this.mulFactor;*/\n    this.mostRecentDraw = [];\n    this.sampleMeans = [];\n    this.tailDirection = null;\n    //this.ele.tailDirectionInput.value = this.tailDirection;\n    this.updateData(this.dataName.mostRecentDraw);\n    this.updateData(this.dataName.sampleMeans);\n  }\n\n  //update chart, mean and textarea based on the dataName\n  updateData(dataName) {\n    let chart, data, meanEle, /*key,*/ textAreaEle;\n    if (dataName === this.dataName.orginalData) {\n      chart = this.dataChart1;\n      data = this.originalData;\n      meanEle = this.ele.originalMean;\n      textAreaEle = this.ele.originalDataDisplay;\n      //this.ele.originalStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(data.map(x => x.value)), 2);\n      this.ele.originalStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(data.map(x => x.value)), 2);\n      this.scaleValues = [MathUtil.minInArray(data.map(x => x.value)), MathUtil.maxInArray(data.map(x => x.value))];\n    } /*else if (dataName === this.dataName.populationData) {\n      chart = this.dataChart2;\n      data = this.populationData;\n      meanEle = this.ele.polulationMean;\n      textAreaEle = this.ele.populationDataDisplay;\n    }*/ else if (dataName === this.dataName.mostRecentDraw) {\n      chart = this.dataChart3;\n      data = this.mostRecentDraw;\n      meanEle = this.ele.sampleMean;\n      textAreaEle = this.ele.recentSampleDisplay;\n      this.ele.drawSampleStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(data.map(x => x.value)), 2);\n    } else {\n      chart = this.dataChart4;\n      data = this.sampleMeans;\n      meanEle = this.ele.samplesMean;\n      textAreaEle = this.ele.sampleMeansDisplay;\n      this.ele.sampleMeansStd.innerText = MathUtil.roundToPlaces(MathUtil.stddev(data), 2);\n    }\n    // update chart\n    let valuesArr = null;\n    if (data.length) {\n      if (dataName !== this.dataName.sampleMeans) {\n        valuesArr = data.map(x => x.value);\n        chart.setDataFromRaw([valuesArr]);\n      } else {\n        valuesArr = data;\n        //const mean = this.populationMean;*/\n        const { chosen, unchosen } = splitByPredicate(\n          valuesArr,\n          this.predicateForTail(Number(this.ele.minTailValInput.value), Number(this.ele.maxTailValInput.value))\n        );\n        //update statistic output\n        this.updateStatistic(chosen.length, unchosen.length);\n        this.updateSampleMeansChartLabels(this.sampleMeansChartLabel);\n        chart.setDataFromRaw([chosen, unchosen]);\n      }\n      // if (data.length > 500) chart.setAnimationDuration(0);\n      // else chart.setAnimationDuration(1000);\n      if (valuesArr.length < 1000) chart.changeDotAppearance(5, undefined);\n      else chart.changeDotAppearance(3, undefined);\n      //if (dataName===this.dataName.mostRecentDraw)  this.ele.drawSampleStd.innerText = MathUtil.roundToPlaces(MathUtil.sampleStddev(valuesArr), 2);\n      if (dataName === this.dataName.orginalData || dataName === this.dataName.sampleMeans) chart.setScale(MathUtil.minInArray(valuesArr), MathUtil.maxInArray(valuesArr));\n      else chart.setScale(this.scaleValues[0], this.scaleValues[1]);\n    } else chart.clear();\n\n    chart.scaleToStackDots();\n    chart.chart.update();\n\n    //update mean output\n    const mean = data.length\n      ? MathUtil.roundToPlaces(MathUtil.mean(valuesArr), 2)\n      : this.translationData.noData;\n    meanEle.innerText = mean;\n    /*if (dataName === this.dataName.orginalData && !isNaN(mean)) {\n      this.ele.tailValueInput.value = mean;\n    }*/\n    // update text area output\n    if (dataName !== this.dataName.sampleMeans) {\n      textAreaEle.value = data.reduce(\n        (acc, x) => acc + `${x.id}`.padEnd(8, ' ') + `${x.value}\\n`,\n        `${this.translationData.id}`.padEnd(8, ' ') + `${this.translationData.value}\\n`\n      );\n    } else {\n      textAreaEle.value = data.reduce(\n        (acc, x, index) => acc + `${index + 1}`.padEnd(8, ' ') + `${x}\\n`,\n        `${this.translationData.id}`.padEnd(8, ' ') + `${this.translationData.mean}\\n`\n      );\n    }\n  }\n\n  updateStatistic(totalChosen, totalUnchosen) {\n    const totalSamples = totalChosen + totalUnchosen;\n    const proportionChosen = MathUtil.roundToPlaces(totalChosen / totalSamples, 4);\n    const proportionUnchosen = MathUtil.roundToPlaces(totalUnchosen / totalSamples, 4);\n    //this.ele.totalSelectedSamplesDisplay.innerText = totalChosen;\n    this.ele.totalSamplesDisplay.innerText = totalSamples;\n    this.ele.chosensampleMeans.innerText = `${totalChosen} / ${totalSamples} = ${proportionChosen}`;\n    this.ele.unchosensampleMeans.innerText = `${totalUnchosen} / ${totalSamples} = ${proportionUnchosen}`;\n  }\n\n  predicateForTail(left, right) {\n    if (this.ele.includeValMin.checked && this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'closed';\n      return function (x) {\n        return x >= left && x <= right;\n      }\n    } else if (this.ele.includeValMin.checked && !this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'left';\n      return function (x) {\n        return x >= left && x < right;\n      }\n    } else if (!this.ele.includeValMin.checked && this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'right';\n      return function (x) {\n        return x > left && x <= right;\n      }\n    } else if (!this.ele.includeValMin.checked && !this.ele.includeValMax.checked) {\n      this.sampleMeansChartLabel = 'open';\n      return function (x) {\n        return x > left && x < right;\n      }\n    } else return null;\n  }\n\n  updateSampleMeansChartLabels(intervalType) {\n    const sampleName = this.translationData.sampleMeans;\n    if (intervalType === \"closed\") {\n      this.dataChart4.updateLabelName(0,\n        Number(this.ele.minTailValInput.value) + ' ≤ ' + sampleName + ' ≤ ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1,\n        sampleName + ' < ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' < ' + sampleName);\n    } else if (intervalType === \"left\") {\n      this.dataChart4.updateLabelName(0,\n        Number(this.ele.minTailValInput.value) + ' ≤ ' + sampleName + ' < ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1,\n        sampleName + ' < ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' ≤ ' + sampleName);\n    } else if (intervalType === \"right\") {\n      this.dataChart4.updateLabelName(0,\n        Number(this.ele.minTailValInput.value) + ' < ' + sampleName + ' ≤ ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1,\n        sampleName + ' ≤ ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' < ' + sampleName);\n    } else if (intervalType === \"open\") {\n      this.dataChart4.updateLabelName(0,\n        Number(this.ele.minTailValInput.value) + ' < ' + sampleName + ' < ' + Number(this.ele.maxTailValInput.value));\n      this.dataChart4.updateLabelName(1,\n        sampleName + ' ≤ ' + Number(this.ele.minTailValInput.value) + '  ⋃  ' + Number(this.ele.maxTailValInput.value) + ' ≤ ' + sampleName);\n    } else {\n      this.dataChart4.updateLabelName(0, sampleName);\n      this.dataChart4.updateLabelName(1, \"N/A\");\n    }\n\n  }\n}\n","<p>one-mean works!</p>\n<div id=\"one-mean\">\n  <h1 id=\"page-title\"> One Mean Hypothesis Testing</h1>\n  <h3 class = 'subtitle'>1. Enter Data:<input type=\"checkbox\" class='toggle-box' checked=\"checked\"></h3>\n  <div class=\"chart-input-form\">\n    <div class=\"data-form\">\n      <select id=\"sample-data\" placeholder=\"Select Sample Data\">\n      </select>\n      <textarea rows=\"8\" id=\"csv-input\" placeholder=\"Please enter data or drop columns from csv file here (no column titles - see example data in dropdown menu)\"></textarea>\n      <button class=\"btn\" id=\"load-data-btn\">Load Data</button>\n      <button class=\"btn\" id=\"reset-btn\">Reset</button>\n      <button class = \"btn\" id = \"upload-btn\"> Upload</button>\n      <input type = \"file\" id = \"fileInput\"  style  = \"display: none;\">\n      <br>\n    </div>\n    <div class=\"data-form\">\n      <textarea rows=\"10\" id=\"original-data-display\" readonly></textarea>\n      <p>Mean: </p>\n      <p class = 'center-num' id =\"original-mean\">{{\"oneMean.noData\"}}</p>\n      <p>Standard Deviation: </p>\n      <p class = 'center-num' id=\"original-std\" >{{\"oneMean.noData\"}}</p>\n      <p>Size <i>N</i>:</p>\n      <p class = 'center-num' id = 'originalsize'>{{\"oneMean.noData\"}}</p>\n    </div>\n    <div class=\"chart-wrap\"><canvas id=\"original-data-chart\"></canvas></div>\n  </div>\n  <hr> \n \n  <h3>2. Sim Section<input type=\"checkbox\" class='toggle-box' checked=\"checked\"></h3>\n  <div class=\"chart-input-form\">\n    <div class=\"data-form\">\n      <label for=\"sample-size\"> Sample Size</label>\n      <input type=\"number\" min=\"1\" step=\"1\" id=\"sample-size\" value=\"10\"/>\n      <label for=\"no-of-sample\"> Number of Simulations</label>\n      <input type=\"number\" min=\"1\" step=\"1\" id=\"no-of-sample\" value=\"1\"/>\n      <br>\n      <button class=\"btn\" id=\"run-sim-btn\">Run Simulation</button>\n      <p id =\"run-sim-error-msg\"></p>\n    </div>\n    <div class=\"data-form\">\n      <textarea rows=\"10\" readonly id=\"most-recent-sample-display\"></textarea>\n      <p>Mean <i>x&#772;</i>:</p>\n      <p class = 'center-num' id =\"sample-mean\">{{\"oneMean.noData\"}}</p>\n      <p>Standard Deviation <i>s</i>:</p>\n      <p class=\"center-num\" id=\"drawsample-std\">{{\"oneMean.noData\"}}</p>\n    </div>\n    <div class=\"chart-wrap\"><canvas id=\"sample-data-chart\"></canvas></div>\n  </div>\n  <hr>\n\n  <h3>3. {{\"oneMean.chartTitle4\"}} <input type=\"checkbox\" class='toggle-box' checked=\"checked\"></h3>\n  <div class=\"chart-input-form\">\n    <div class=\"data-form\">\n      <p>{{\"oneMean.descripInterval\"}}</p>\n\n      <label for=\"min-tailValue\">Set Min</label>\n      <input type=\"number\" id=\"min-tailValue\" value=\"0\">\n      <label for=\"min-tailValue\">Inlcude Min<input type=\"checkbox\" id=\"includeMin\"></label>\n      <br>\n\n      <label for=\"max-tailValue\">Set Max</label>\n      <input type=\"number\" id=\"max-tailValue\" value=\"1\">\n      <label for=\"min-tailValue\">Include Max<input type=\"checkbox\" id=\"includeMax\"></label>\n      <br>\n      <p>Proportion Chosen</p>\n      <p class = \"center-num\" id=\"chosen-sample-means\">{{\"oneMean.noData\"}}</p>\n      <p>Proportion Unchosen</p>\n      <p class = \"center-num\"  id=\"unchosen-sample-means\">{{\"oneMean.noData\"}}</p>\n    </div>\n    <div class=\"data-form\">\n      <textarea rows=\"10\" readonly id=\"samples-mean-display\"></textarea>\n      <p>Mean Of Sample Means</p>\n      <p class = \"center-num\" id =\"samples-mean\">{{\"oneMean.noData\"}}</p>\n      <p>STD Of Means</p>\n      <p class = \"center-num\" id =\"samplemeans-std\">{{\"oneMean.noData\"}}</p>\n      <p>Total Samples</p>\n      <p class=\"center-num\" id=\"total-samples\">{{\"oneMean.noData\"}}</p>\n    </div>\n    <div class=\"chart-wrap\"><canvas id=\"statistic-data-chart\"></canvas></div>\n  </div>\n</div>\n\n<script src=\"{{base}}../lib/Chart.bundle.min.js\"></script>\n<script src=\"./oneMeanEntry.js\" type=\"module\"></script>\n<script src=\"./oneMean.bundle.js\"></script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}